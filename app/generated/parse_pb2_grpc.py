# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import app.generated.parse_pb2 as parse__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in parse_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ParserWorkerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Parse = channel.unary_unary(
                '/parser.ParserWorker/Parse',
                request_serializer=parse__pb2.ParseRequest.SerializeToString,
                response_deserializer=parse__pb2.ParseResponse.FromString,
                _registered_method=True)


class ParserWorkerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Parse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ParserWorkerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Parse': grpc.unary_unary_rpc_method_handler(
                    servicer.Parse,
                    request_deserializer=parse__pb2.ParseRequest.FromString,
                    response_serializer=parse__pb2.ParseResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'parser.ParserWorker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('parser.ParserWorker', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ParserWorker(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Parse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/parser.ParserWorker/Parse',
            parse__pb2.ParseRequest.SerializeToString,
            parse__pb2.ParseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ParserManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterWorker = channel.unary_unary(
                '/parser.ParserManager/RegisterWorker',
                request_serializer=parse__pb2.WorkerRegistration.SerializeToString,
                response_deserializer=parse__pb2.RegistrationResponse.FromString,
                _registered_method=True)
        self.ReportStatus = channel.unary_unary(
                '/parser.ParserManager/ReportStatus',
                request_serializer=parse__pb2.StatusReport.SerializeToString,
                response_deserializer=parse__pb2.StatusAck.FromString,
                _registered_method=True)


class ParserManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterWorker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ParserManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterWorker,
                    request_deserializer=parse__pb2.WorkerRegistration.FromString,
                    response_serializer=parse__pb2.RegistrationResponse.SerializeToString,
            ),
            'ReportStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportStatus,
                    request_deserializer=parse__pb2.StatusReport.FromString,
                    response_serializer=parse__pb2.StatusAck.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'parser.ParserManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('parser.ParserManager', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ParserManager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/parser.ParserManager/RegisterWorker',
            parse__pb2.WorkerRegistration.SerializeToString,
            parse__pb2.RegistrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReportStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/parser.ParserManager/ReportStatus',
            parse__pb2.StatusReport.SerializeToString,
            parse__pb2.StatusAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
